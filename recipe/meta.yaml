# if you wish to build release candidate number X, append the version string with ".rcX"
{% set version = "2.6.0.rc7" %}
{% set build = 0 %}

{% if cuda_compiler_version != "None" %}
{% set build = build + 200 %}
{% endif %}

{% if blas_impl == "mkl" %}
{% set build = build + 100 %}
{% endif %}

# see .ci/docker/ci_commit_pins/triton.txt
# pytorch and triton are released in tandem, see notes in their release process
# https://github.com/pytorch/pytorch/blob/main/RELEASE.md#triton-dependency-for-the-release
{% set triton = "3.1.0" %}

# TODO Temporary pin, remove
{% set mkl = "<2025" %}

package:
  name: libtorch
  version: {{ version }}

source:
{% if "rc" in version %}
  git_url: https://github.com/pytorch/pytorch.git
  git_rev: v{{ version.replace(".rc", "-rc") }}
{% else %}
  # The "pytorch-v" tarballs contain submodules; the "pytorch-" ones don't.
  url: https://github.com/pytorch/pytorch/releases/download/v{{ version }}/pytorch-v{{ version }}.tar.gz
  sha256: 740eb5fff95e33cfe699bad43be83523f569c7cc7f9c285c2a255416443dd266
{% endif %}
  patches:
    - patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch
    # backport https://github.com/pytorch/pytorch/pull/137084
    - patches/0002-Help-find-numpy.patch
    # unpin sympy; 1.13.2 was reported to result in test failures on Windows and mac, see
    # https://github.com/pytorch/pytorch/pull/133235
    - patches/0003-Update-sympy-version.patch
    - patches/0004-Fix-duplicate-linker-script.patch  # [cuda_compiler_version != "None" and aarch64]
    # conda-specific patch, upstream force-disables libcufile w/ TH_BINARY_BUILD
    # for their PyPI wheel builds
    - patches/0005-Allow-libcufile-for-conda-builds.patch
    # conda-specific patch, lets us override CUDA paths
    - patches/0006-Allow-overriding-CUDA-related-paths.patch
    # fix BLAS calling convention for openblas
    - patches/0007-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch
    # fix mkl-2024 issue
    # https://github.com/pytorch/pytorch/pull/143894
    - patches/0008-fix-issue-142484.patch
    - patches/0009-Fix-FindOpenBLAS.patch
    # backport https://github.com/google/XNNPACK/commit/5f23827e66cca435fa400b6e221892ac95af0079
    # for https://github.com/pytorch/pytorch/issues/141083
    # - patches_submodules/0001-Fix-bazel-linux-aarch64-gcc13-workflow-and-resolve-a.patch

build:
  number: {{ build }}
  # cuda 11.8 was dropped due to maintenance effort, see discussion in #177
  skip: true  # [cuda_compiler_version == "11.8"]
  # This logic allows two rc variants to be defined in the conda_build_config, but only one to actually be built.
  # We want to be able to define two variants in the cbc so we can assign different labels to each in the upload channel
  # (by zipping is_rc with channel_targets). This prevents rc builds being used unless specifically requested.
{% if "rc" in version %}
  skip: true  # [not is_rc]
{% else %}
  skip: true  # [is_rc]
{% endif %}
  string: cuda{{ cuda_compiler_version | replace('.', '') }}_{{ blas_impl }}_h{{ PKG_HASH }}_{{ build }}  # [cuda_compiler_version != "None"]
  string: cpu_{{ blas_impl }}_h{{ PKG_HASH }}_{{ build }}                                                 # [cuda_compiler_version == "None"]
  detect_binary_files_with_prefix: false
  run_exports:
    - {{ pin_subpackage('libtorch', max_pin='x.x') }}
  ignore_run_exports_from:
    - python *                               # [megabuild]
    - numpy *                                # [megabuild]
    - cross-python_{{ target_platform }}     # [megabuild and build_platform != target_platform]
  ignore_run_exports:
    - python *                               # [megabuild]
    - numpy *                                # [megabuild]
    - libmagma_sparse

requirements:
  # Keep this list synchronized (except for python*, numpy*) in outputs
  # We use python to build libtorch as well because it is easier
  build:
    # When you change 3.12 here, change it in build.sh/bld.bat as well
    - python 3.12                            # [megabuild and build_platform != target_platform]
    - python                                 # [not megabuild and build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - numpy  *                               # [megabuild and build_platform != target_platform]
    - numpy                                  # [not megabuild and build_platform != target_platform]
    - {{ stdlib('c') }}
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
    - libgomp        # [linux]
    - llvm-openmp    # [osx]
    - intel-openmp {{ mkl }}  # [win]
    - libuv          # [win]
    - cmake
    - ninja
    # Keep libprotobuf here so that a compatibile version
    # of protobuf is installed between build and host
    - libprotobuf
    - protobuf
    - make      # [linux]
    - sccache   # [win]
  host:
    # GPU requirements
    - cudnn                           # [cuda_compiler_version != "None"]
    - nccl                            # [cuda_compiler_version != "None" and linux]
    - magma                           # [cuda_compiler_version != "None"]
    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
    - nvtx-c                          # [cuda_compiler_version != "None"]
    {% if cuda_compiler_version != "None" %}
    - cuda-driver-dev                 # [linux]
    - cuda-cudart-dev
    - cuda-cupti-dev    # [linux]
    - cuda-nvrtc-dev
    - cuda-nvtx-dev
    - cuda-nvml-dev
    - cuda-profiler-api
    - cusparselt     # [linux]
    - libcublas-dev
    - libcudss-dev   # [linux]
    - libcufile-dev  # [linux]
    - libcufft-dev
    - libcurand-dev
    - libcusolver-dev
    - libcusparse-dev
    {% endif %}
    # other requirements
    - python 3.12  # [megabuild]
    - python       # [not megabuild]
    - numpy *      # [megabuild]
    - numpy        # [not megabuild]
    - pip
    - setuptools
    - pyyaml
    - requests
    - six
    - mkl-devel {{ mkl }}   # [blas_impl == "mkl"]
    - libcblas * *_mkl      # [blas_impl == "mkl"]
    - libblas               # [blas_impl != "mkl"]
    - libcblas              # [blas_impl != "mkl"]
    - liblapack             # [blas_impl != "mkl"]
    - libgomp   # [linux]
    - llvm-openmp    # [osx]
    - intel-openmp {{ mkl }}  # [win]
    - libabseil
    - libprotobuf
    - sleef
    - libuv
    - pkg-config  # [unix]
    - typing_extensions
  run:
    # GPU requirements without run_exports
    - {{ pin_compatible('cudnn') }}                       # [cuda_compiler_version != "None"]
    - intel-openmp {{ mkl }}  # [win]
    - libblas * *{{ blas_impl }}  # [blas_impl == "mkl"]
  run_constrained:
    # These constraints ensure conflict between pytorch and
    # pytorch-cpu 1.1 which we built before conda-forge had GPU infrastructure
    # built into place.
    # https://github.com/conda-forge/pytorch-cpu-feedstock/issues/65
    - pytorch-cpu =={{ version }}  # [cuda_compiler_version == "None"]
    - pytorch-gpu ==99999999       # [cuda_compiler_version == "None"]
    - pytorch-gpu =={{ version }}  # [cuda_compiler_version != "None"]
    - pytorch-cpu ==99999999       # [cuda_compiler_version != "None"]
    - pytorch {{ version }} cuda{{ cuda_compiler_version | replace('.', '') }}_{{ blas_impl }}_*_{{ build }}  # [cuda_compiler_version != "None"]
    - pytorch {{ version }} cpu_{{ blas_impl }}_*_{{ build }}                                                 # [cuda_compiler_version == "None"]
    # if using OpenBLAS, ensure that a version compatible with OpenMP is used
    # otherwise, we get the following warnings:
    # OpenBLAS Warning : Detect OpenMP Loop and this application may hang. Please rebuild the library with USE_OPENMP=1 option.
    - openblas * openmp_*          # [unix and blas_impl != "mkl"]

# these tests are for the libtorch output below, but due to
# a particularity of conda-build, that output is defined in
# the global build stage, including tests
test:
  commands:
    # libraries
    {% for each_lib in [ 'c10', 'shm', 'torch', 'torch_cpu', 'torch_global_deps'] %}
    - test -f $PREFIX/lib/lib{{ each_lib }}.so                    # [linux]
    - test -f $PREFIX/lib/lib{{ each_lib }}.dylib                 # [osx]
    - if not exist %SP_DIR%\torch\lib\{{ each_lib }}.dll exit 1   # [win]
    {% endfor %}

    # Windows specific .LIB files
    {% for each_lib in [ 'c10', 'shm', 'torch', 'torch_cpu'] %}
    - if not exist %SP_DIR%\torch\lib\{{ each_lib }}.lib exit 1   # [win]
    {% endfor %}

    # Windows specific libraries
    {% for each_lib in [ 'asmjit', 'fbgemm'] %}
    - if not exist %SP_DIR%\torch\lib\{{ each_lib }}.dll exit 1   # [win]
    - if not exist %SP_DIR%\torch\lib\{{ each_lib }}.lib exit 1   # [win]
    {% endfor %}

    # Cuda only libraries
    {% for each_lib in ['c10_cuda', 'caffe2_nvrtc', 'torch_cuda'] %}
    - test -f $PREFIX/lib/lib{{ each_lib }}.so                    # [linux and cuda_compiler_version != "None"]
    - if not exist %SP_DIR%\torch\lib\{{ each_lib }}.dll exit 1   # [win and cuda_compiler_version != "None"]
    - if not exist %SP_DIR%\torch\lib\{{ each_lib }}.lib exit 1   # [win and cuda_compiler_version != "None"]
    {% endfor %}

    # Linux specific cuda libraries
    {% for each_lib in [ 'torch_cuda_linalg'] %}
    - test -f $PREFIX/lib/lib{{ each_lib }}.so                    # [linux and cuda_compiler_version != "None"]
    {% endfor %}

outputs:
  - name: libtorch
  - name: pytorch
    script: build.sh    # [unix]
    script: bld.bat     # [win]
    build:
      string: cuda{{ cuda_compiler_version | replace('.', '') }}_{{ blas_impl }}_py{{ CONDA_PY }}_h{{ PKG_HASH }}_{{ build }}  # [cuda_compiler_version != "None"]
      string: cpu_{{ blas_impl }}_py{{ CONDA_PY }}_h{{ PKG_HASH }}_{{ build }}                                                 # [cuda_compiler_version == "None"]
      detect_binary_files_with_prefix: false
      run_exports:
        - {{ pin_subpackage('pytorch', max_pin='x.x') }}
        - {{ pin_subpackage('libtorch', max_pin='x.x') }}
      ignore_run_exports:
        - libmagma_sparse
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - numpy                                  # [build_platform != target_platform]
        - {{ stdlib('c') }}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
        - libgomp   # [linux]
        - llvm-openmp    # [osx]
        - intel-openmp {{ mkl }}  # [win]
        - cmake
        - ninja
        # Keep libprotobuf here so that a compatibile version
        # of protobuf is installed between build and host
        - libprotobuf
        - protobuf
        - make      # [linux]
        - sccache   # [win]
      host:
        # GPU requirements
        - cudnn                           # [cuda_compiler_version != "None"]
        - nccl                            # [cuda_compiler_version != "None" and linux]
        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
        - nvtx-c                          # [cuda_compiler_version != "None"]
        - magma                           # [cuda_compiler_version != "None"]
        {% if cuda_compiler_version != "None" %}
        - cuda-driver-dev                 # [linux]
        - cuda-cudart-dev
        - cuda-cupti-dev    # [linux]
        - cuda-nvrtc-dev
        - cuda-nvtx-dev
        - cuda-nvml-dev
        - cuda-profiler-api
        - cusparselt     # [linux]
        - libcublas-dev
        - libcudss-dev   # [linux]
        - libcufile-dev  # [linux]
        - libcufft-dev
        - libcurand-dev
        - libcusolver-dev
        - libcusparse-dev
        {% endif %}
        # other requirements
        - python
        - numpy
        - pip
        - setuptools
        - pyyaml
        - requests
        - six
        - mkl-devel {{ mkl }}   # [blas_impl == "mkl"]
        - libcblas * *_mkl      # [blas_impl == "mkl"]
        - libcblas              # [blas_impl != "mkl"]
        - liblapack             # [blas_impl != "mkl"]
        - libgomp   # [linux]
        - llvm-openmp    # [osx]
        - intel-openmp {{ mkl }}  # [win]
        - libabseil
        - libprotobuf
        - sleef
        - libuv
        - pkg-config  # [unix]
        - typing_extensions
        - {{ pin_subpackage('libtorch', exact=True) }}
      run:
        - {{ pin_subpackage('libtorch', exact=True) }}  # [megabuild]
        # for non-megabuild, allow libtorch from any python version
        - libtorch {{ version }}.* *_{{ build }}        # [not megabuild]
        - llvm-openmp    # [osx]
        - intel-openmp {{ mkl }}  # [win]
        - libblas * *{{ blas_impl }}  # [blas_impl == "mkl"]
        - nomkl                       # [blas_impl != "mkl"]
        # GPU requirements without run_exports
        - {{ pin_compatible('cudnn') }}     # [cuda_compiler_version != "None"]
        - triton {{ triton }}               # [cuda_compiler_version != "None" and not win]
        # avoid that people without GPUs needlessly download ~0.5-1GB
        - __cuda                            # [cuda_compiler_version != "None"]
        - python
        # other requirements, see https://github.com/pytorch/pytorch/blame/main/requirements.txt
        - filelock
        - fsspec
        - jinja2
        - networkx
        - optree >=0.13.0
        - setuptools
        # sympy 1.13.2 was reported to result in test failures on Windows and mac
        # https://github.com/pytorch/pytorch/pull/133235
        - sympy >=1.13.1,!=1.13.2
        - typing_extensions >=4.10.0
      run_constrained:
        # These constraints ensure conflict between pytorch and
        # pytorch-cpu 1.1 which we built before conda-forge had GPU infrastructure
        # built into place.
        # https://github.com/conda-forge/pytorch-cpu-feedstock/issues/65
        - pytorch-cpu =={{ version }}  # [cuda_compiler_version == "None"]
        - pytorch-gpu ==99999999       # [cuda_compiler_version == "None"]
        - pytorch-gpu =={{ version }}  # [cuda_compiler_version != "None"]
        - pytorch-cpu ==99999999       # [cuda_compiler_version != "None"]

    test:
      requires:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - ninja
        - boto3
        - hypothesis
        - pytest
        - tabulate
        - pydot
        - pip
        - expecttest
        - xmlrunner
        # Required by run_test.py
        - pytest-flakefinder
        - pytest-rerunfailures
        - pytest-xdist
        # danpetry/TF: Pytorch includes their own edited version of pytest-shard and adding
        # it into the test deps as well results in the --shard-id option being added twice.
        # https://github.com/pytorch/pytorch/blob/main/test/pytest_shard_custom.py
        # - pytest-shard
      imports:
        - torch
      source_files:
        # Only include the source_files if we are actually going to run the tests.
        - test
        # tools/ is needed to optimise test run
        # as of pytorch=2.0.0, there is a bug when trying to run tests without the tools
        - tools
      commands:
        # Run pip check so as to ensure that all pytorch packages are installed
        # https://github.com/conda-forge/pytorch-cpu-feedstock/issues/24
        - pip check
        - python -c "import torch; print(torch.__version__)"
        - python -c "import torch; assert torch.backends.mkldnn.m.is_available()"  # [x86 and cuda_compiler_version == "None"]
        - python -c "import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')"
        # At conda-forge, we target versions of OSX that are too old for MPS support
        # But if users install a newer version of OSX, they will have MPS support
        # https://github.com/conda-forge/pytorch-cpu-feedstock/pull/123#issuecomment-1186355073
        # - python -c "import torch; assert torch.backends.mps.is_available()" # [osx]

        # python-version-specific library (default location in SP_DIR symlinks back to this)
        - test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}     # [unix]

        # a reasonably safe subset of tests that should run under 15 minutes
        # disable hypothesis because it randomly yields health check errors
        {% set tests = " ".join([
            "test/test_autograd.py",
            "test/test_autograd_fallback.py",
            "test/test_custom_ops.py",
            "test/test_linalg.py",
            "test/test_mkldnn.py",
            "test/test_modules.py",
            "test/test_nn.py",
            "test/test_torch.py",
            "test/test_xnnpack_integration.py",
            "-m \"not hypothesis\"",
        ]) %}

        {% set skips = "(TestTorch and test_print)" %}
        # tolerance violation with openblas
        {% set skips = skips ~ " or test_1_sized_with_0_strided_cpu_float32" %}         # [osx]
        # timeouts and failures on aarch, see https://github.com/conda-forge/pytorch-cpu-feedstock/pull/298#issuecomment-2555888508
        {% set skips = skips ~ " or test_pynode_destruction_deadlock" %}                # [aarch64]
        {% set skips = skips ~ " or (TestLinalgCPU and test_cholesky_cpu_float32)" %}   # [aarch64]
        {% set skips = skips ~ " or (TestLinalgCPU and test_pca_lowrank_cpu)" %}        # [aarch64]
        {% set skips = skips ~ " or (TestLinalgCPU and test_svd_lowrank_cpu)" %}        # [aarch64]
        {% set skips = skips ~ " or (TestMkldnnCPU and test_lstm_cpu)" %}               # [aarch64]
        # dynamo does not support python 3.13
        {% set skips = skips ~ " or (TestCustomOp and test_data_dependent_compile)" %}  # [py==313]
        {% set skips = skips ~ " or (TestCustomOp and test_functionalize_error)" %}     # [py==313]
        {% set skips = skips ~ " or (TestCustomOpAPI and test_compile)" %}              # [py==313]
        {% set skips = skips ~ " or (TestCustomOpAPI and test_fake)" %}                 # [py==313]
        {% set skips = skips ~ " or test_compile_int4_mm or test_compile_int8_mm" %}    # [py==313]
        # doesn't crash, but gets different result on aarch + CUDA
        {% set skips = skips ~ " or illcondition_matrix_input_should_not_crash_cpu" %}  # [aarch64 and cuda_compiler_version != "None"]
        # may crash spuriously
        {% set skips = skips ~ " or (TestAutograd and test_profiler_seq_nr)" %}
        {% set skips = skips ~ " or (TestAutograd and test_profiler_propagation)" %}
        # trivial accuracy problems
        {% set skips = skips ~ " or test_BCELoss_weights_no_reduce_cuda" %}             # [unix and cuda_compiler_version != "None"]
        {% set skips = skips ~ " or test_ctc_loss_cudnn_tensor_cuda " %}                # [unix and cuda_compiler_version != "None"]
        {% set skips = skips ~ " or (TestTorch and test_index_add_correctness)" %}      # [unix and cuda_compiler_version != "None"]
        # MKL problems
        {% set skips = skips ~ " or (TestLinalgCPU and test_inverse_errors_large_cpu)" %}  # [unix and blas_impl == "mkl" and cuda_compiler_version != "None"]
        # these tests are failing with low -n values
        {% set skips = skips ~ " or test_base_does_not_require_grad_mode_nothing" %}
        {% set skips = skips ~ " or test_base_does_not_require_grad_mode_warn" %}
        {% set skips = skips ~ " or test_composite_registered_to_cpu_mode_nothing" %}
        # these tests are failing on windows
        {% set skips = skips ~ " or (TestNN and test_Conv1d_dilated)" %}                 # [win]
        {% set skips = skips ~ " or (TestNN and test_Conv1d_pad_same_dilated)" %}        # [win]
        {% set skips = skips ~ " or (TestNN and test_Conv2d_pad_same_dilated)" %}        # [win]
        {% set skips = skips ~ " or (TestNN and test_Conv2d_padding)" %}                 # [win]
        {% set skips = skips ~ " or (TestNN and test_Conv2d_strided)" %}                 # [win]
        {% set skips = skips ~ " or (TestNN and test_Conv3d_dilated)" %}                 # [win]
        {% set skips = skips ~ " or (TestNN and test_Conv3d_dilated_strided)" %}         # [win]
        {% set skips = skips ~ " or (TestNN and test_Conv3d_pad_same_dilated)" %}        # [win]
        {% set skips = skips ~ " or (TestNN and test_Conv3d_stride)" %}                  # [win]
        {% set skips = skips ~ " or (TestNN and test_Conv3d_stride_padding)" %}          # [win]

        # the whole test suite takes forever, but we should get a good enough coverage
        # for potential packaging problems by running a fixed subset
        - export OMP_NUM_THREADS=2  # [unix]
        # reduced paralellism to avoid OOM; test only one python version on aarch because emulation is super-slow
        - python -m pytest -n 2 {{ tests }} -k "not ({{ skips }})" --durations=50   # [unix and (not aarch64 or py==312)]
        - python -m pytest -v -s {{ tests }} -k "not ({{ skips }})" --durations=50  # [win]

  # 2021/08/01, hmaarrfk
  # While this seems like a roundabout way of defining the package name
  # It helps the linter avoid errors on a package not having tests.
  {% set pytorch_cpu_gpu = "pytorch-cpu" %}   # [cuda_compiler_version == "None"]
  {% set pytorch_cpu_gpu = "pytorch-gpu" %}   # [cuda_compiler_version != "None"]
  - name: {{ pytorch_cpu_gpu }}
    build:
      string: cuda{{ cuda_compiler_version | replace('.', '') }}_{{ blas_impl }}_h{{ PKG_HASH }}_{{ build }}                  # [megabuild and cuda_compiler_version != "None"]
      string: cpu_{{ blas_impl }}_h{{ PKG_HASH }}_{{ build }}                                                                 # [megabuild and cuda_compiler_version == "None"]
      string: cuda{{ cuda_compiler_version | replace('.', '') }}_{{ blas_impl }}py{{ CONDA_PY }}_h{{ PKG_HASH }}_{{ build }}  # [not megabuild and cuda_compiler_version != "None"]
      string: cpu_{{ blas_impl }}_py{{ CONDA_PY }}_h{{ PKG_HASH }}_{{ build }}                                                # [not megabuild and cuda_compiler_version == "None"]
      detect_binary_files_with_prefix: false
      # weigh down cpu implementation and give cuda preference
      track_features:
        - pytorch-cpu                                      # [cuda_compiler_version == "None"]
    requirements:
      run:
        - pytorch {{ version }}=cuda*_{{ blas_impl }}*{{ build }}   # [megabuild and cuda_compiler_version != "None"]
        - pytorch {{ version }}=cpu_{{ blas_impl }}*{{ build }}     # [megabuild and cuda_compiler_version == "None"]
        - {{ pin_subpackage("pytorch", exact=True) }}               # [not megabuild]
    test:
      imports:
        - torch

about:
  home: https://pytorch.org/
  dev_url: https://github.com/pytorch/pytorch
  license: BSD-3-Clause
  license_family: BSD
  license_file:
    - LICENSE
    - NOTICE
    - third_party/pybind11/LICENSE
  summary: PyTorch is an optimized tensor library for deep learning using GPUs and CPUs.

extra:
  recipe-maintainers:
    - h-vetinari
    - jeongseok-meta
    - hmaarrfk
    - sodre
    - benjaminrwilson
    - Tobias-Fischer
    - beckermr
    - baszalmstra
  feedstock-name: pytorch-cpu
